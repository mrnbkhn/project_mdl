{"version":3,"file":"vplservice.min.js","sources":["../src/vplservice.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides utility method to communicate with a VPL (this is an API wrapper to use VPLUtil and VPLUI)\n * @copyright  Astor Bizard, 2019\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// VPLUtil and VPLUI have to be loaded to use this module.\n/* globals VPLUtil */\n/* globals VPLUI */\ndefine(['jquery', 'core/url'], function($, url) {\n\n    /**\n     * Build ajax url to call with VPLUI.\n     * @param {String|Number} vplId VPL ID.\n     * @param {String|Number} userId User ID.\n     * @param {String} file (optional) Ajax file to use. Defaults to edit.\n     * @return {String} The ajax url built.\n     */\n    function getAjaxUrl(vplId, userId, file) {\n        if (file === undefined) {\n            file = 'edit';\n        }\n        return url.relativeUrl('/mod/vpl/forms') + '/' + file + '.json.php?id=' + vplId + '&userId=' + userId + '&action=';\n    }\n\n    var VPLService = {};\n\n    // Cache for info.\n    var cache = {\n        reqfile: [],\n        execfiles: []\n    };\n\n    // Retrieve specified files from the VPL (either 'reqfile' or 'execfile').\n    // Note : these files are stored in cache. To clear it, the user has to reload the page.\n    VPLService.info = function(filesType, vplId) {\n        if (cache[filesType][vplId] != undefined) {\n            return $.Deferred().resolve(cache[filesType][vplId]).promise();\n        } else {\n            var deferred = filesType == 'reqfile' ?\n                VPLUI.requestAction('resetfiles', '', {}, getAjaxUrl(vplId, '')) :\n                VPLUI.requestAction('load', '', {}, getAjaxUrl(vplId, '', 'executionfiles'));\n            return deferred\n            .then(function(response) {\n                var files = filesType == 'reqfile' ?\n                    response.files[0] :\n                    response.files;\n                cache[filesType][vplId] = files;\n                return files;\n            }).promise();\n        }\n    };\n\n    // Save student answer to VPL, by replacing {{ANSWER}} in the template by the student answer.\n    VPLService.save = function(vplId, questionId, answer, filestype) {\n        return $.ajax(url.relativeUrl('/question/type/vplquestion/ajax/savetovpl.json.php'), {\n            data: {\n                id: vplId,\n                qid: questionId,\n                answer: answer,\n                filestype: filestype\n            },\n            method: 'POST'\n        }).promise();\n    };\n\n    // Execute the specified action (should be 'run' or 'evaluate').\n    // Note that this function does not call save, it has to be called beforehand if needed.\n    // Note also that callback may be called several times\n    // (especially one time with (false) execution error and one time right after with execution result).\n    VPLService.exec = function(action, vplId, userId, terminal, callback) {\n        // Build the options object for VPLUI.\n        var options = {\n            ajaxurl: getAjaxUrl(vplId, userId),\n            resultSet: false,\n            errorCause: 'unknown',\n            setResult: function(result) {\n                this.resultSet = true;\n                callback(result);\n            },\n            close: function() {\n                // If connection is closed without a result set, display an error.\n                // /!\\ It can happen that result will be set about 0.3s after closing.\n                // -> Set a timeout to avoid half-second display of error.\n                // Note : if delay between close and result is greater than timeout, it is fine\n                // (there will just be a 0.1s error display before displaying the result).\n                var _this = this;\n                setTimeout(function() {\n                    if (!_this.resultSet) {\n                        callback({execerror: M.util.get_string('closerecievednoretrieve', 'qtype_vplquestion', _this.errorCause)});\n                    }\n                }, _this.errorCause != 'unknown' ? 0 : 600); // If an error cause is known, no need to delay.\n            },\n\n            // The following will only be used for the 'run' action.\n            getConsole: function() {\n                return terminal;\n            },\n            run: function(type, conInfo, ws) {\n                var _this = this;\n                terminal.connect(conInfo.executionURL, function() {\n                    ws.close();\n                    if (!_this.resultSet) {\n                        // This may happen for the run action.\n                        callback({});\n                    }\n                });\n            }\n        };\n\n        // Recode progress bar so we can display the cause when execution is unexpectedly closed.\n        VPLUI.progressBar = function() {\n            var closed = false;\n            this.setLabel = function(message) {\n                var knownCauses = ['timeout', 'outofmemory'];\n                knownCauses.forEach(function(cause) {\n                    var pattern = '{' + cause + '}';\n                    if (message.indexOf(pattern) !== -1) {\n                        options.errorCause = cause + message.substring(message.indexOf(pattern) + pattern.length);\n                    }\n                });\n            };\n            this.close = function() {\n                closed = true;\n            };\n            this.isClosed = function() {\n                return closed;\n            };\n        };\n\n        return VPLUI.requestAction(action, '', {}, options.ajaxurl)\n        .done(function(response) {\n            VPLUI.webSocketMonitor(response, '', '', options);\n        }).promise();\n    };\n\n    return {\n        call: function(service, ...args) {\n            // Deactivate progress bar, as we have our own progress indicator.\n            VPLUI.progressBar = function() {\n                this.setLabel = function() {\n                    return;\n                };\n                this.close = function() {\n                    return;\n                };\n                this.isClosed = function() {\n                    return true;\n                };\n            };\n            // Call service.\n            return VPLService[service](...args);\n        },\n\n        langOfFile: function(fileName) {\n            return VPLUtil.langType(fileName.split('.').pop());\n        },\n\n        isBinary: function(fileName) {\n            return VPLUtil.isBinary(fileName);\n        }\n    };\n});\n"],"names":["define","$","url","getAjaxUrl","vplId","userId","file","undefined","relativeUrl","VPLService","cache","reqfile","execfiles","info","filesType","Deferred","resolve","promise","VPLUI","requestAction","then","response","files","save","questionId","answer","filestype","ajax","data","id","qid","method","exec","action","terminal","callback","options","ajaxurl","resultSet","errorCause","setResult","result","this","close","_this","setTimeout","execerror","M","util","get_string","getConsole","run","type","conInfo","ws","connect","executionURL","progressBar","closed","setLabel","message","forEach","cause","pattern","indexOf","substring","length","isClosed","done","webSocketMonitor","call","service","_len","arguments","args","Array","_key","langOfFile","fileName","VPLUtil","langType","split","pop","isBinary"],"mappings":";;;;;AAwBAA,OAAM,+BAAC,CAAC,SAAU,aAAa,SAASC,EAAGC,KASvC,SAASC,WAAWC,MAAOC,OAAQC,MAI/B,YAHaC,IAATD,OACAA,KAAO,QAEJJ,IAAIM,YAAY,kBAAoB,IAAMF,KAAO,gBAAkBF,MAAQ,WAAaC,OAAS,UAC5G,CAEA,IAAII,WAAa,CAAA,EAGbC,MAAQ,CACRC,QAAS,GACTC,UAAW,IA0Gf,OArGAH,WAAWI,KAAO,SAASC,UAAWV,OAClC,OAA+BG,MAA3BG,MAAMI,WAAWV,OACVH,EAAEc,WAAWC,QAAQN,MAAMI,WAAWV,QAAQa,WAEzB,WAAbH,UACXI,MAAMC,cAAc,aAAc,GAAI,CAAA,EAAIhB,WAAWC,MAAO,KAC5Dc,MAAMC,cAAc,OAAQ,GAAI,CAAA,EAAIhB,WAAWC,MAAO,GAAI,oBAE7DgB,MAAK,SAASC,UACX,IAAIC,MAAqB,WAAbR,UACRO,SAASC,MAAM,GACfD,SAASC,MAEb,OADAZ,MAAMI,WAAWV,OAASkB,MACnBA,KACX,IAAGL,WAKXR,WAAWc,KAAO,SAASnB,MAAOoB,WAAYC,OAAQC,WAClD,OAAOzB,EAAE0B,KAAKzB,IAAIM,YAAY,sDAAuD,CACjFoB,KAAM,CACFC,GAAIzB,MACJ0B,IAAKN,WACLC,OAAQA,OACRC,UAAWA,WAEfK,OAAQ,SACTd,WAOPR,WAAWuB,KAAO,SAASC,OAAQ7B,MAAOC,OAAQ6B,SAAUC,UAExD,IAAIC,QAAU,CACVC,QAASlC,WAAWC,MAAOC,QAC3BiC,WAAW,EACXC,WAAY,UACZC,UAAW,SAASC,QAChBC,KAAKJ,WAAY,EACjBH,SAASM,OACZ,EACDE,MAAO,WAMH,IAAIC,MAAQF,KACZG,YAAW,WACFD,MAAMN,WACPH,SAAS,CAACW,UAAWC,EAAEC,KAAKC,WAAW,0BAA2B,oBAAqBL,MAAML,aAEpG,GAAsB,WAApBK,MAAML,WAA0B,EAAI,IAC1C,EAGDW,WAAY,WACR,OAAOhB,QACV,EACDiB,IAAK,SAASC,KAAMC,QAASC,IACzB,IAAIV,MAAQF,KACZR,SAASqB,QAAQF,QAAQG,cAAc,WACnCF,GAAGX,QACEC,MAAMN,WAEPH,SAAS,CAAE,EAEnB,GACJ,GAuBJ,OAnBAjB,MAAMuC,YAAc,WAChB,IAAIC,QAAS,EACbhB,KAAKiB,SAAW,SAASC,SACH,CAAC,UAAW,eAClBC,SAAQ,SAASC,OACzB,IAAIC,QAAU,IAAMD,MAAQ,KACM,IAA9BF,QAAQI,QAAQD,WAChB3B,QAAQG,WAAauB,MAAQF,QAAQK,UAAUL,QAAQI,QAAQD,SAAWA,QAAQG,QAE1F,KAEJxB,KAAKC,MAAQ,WACTe,QAAS,GAEbhB,KAAKyB,SAAW,WACZ,OAAOT,SAIRxC,MAAMC,cAAcc,OAAQ,GAAI,CAAA,EAAIG,QAAQC,SAClD+B,MAAK,SAAS/C,UACXH,MAAMmD,iBAAiBhD,SAAU,GAAI,GAAIe,QAC7C,IAAGnB,WAGA,CACHqD,KAAM,SAASC,SAEXrD,MAAMuC,YAAc,WAChBf,KAAKiB,SAAW,aAGhBjB,KAAKC,MAAQ,aAGbD,KAAKyB,SAAW,WACZ,OAAO,IAEb,IAAAK,IAAAA,KAAAC,UAAAP,OAZqBQ,SAAIC,MAAAH,KAAAA,EAAAA,UAAAI,KAAA,EAAAA,KAAAJ,KAAAI,OAAJF,KAAIE,KAAAH,GAAAA,UAAAG,MAc3B,OAAOnE,WAAW8D,YAAYG,KACjC,EAEDG,WAAY,SAASC,UACjB,OAAOC,QAAQC,SAASF,SAASG,MAAM,KAAKC,MAC/C,EAEDC,SAAU,SAASL,UACf,OAAOC,QAAQI,SAASL,SAC5B,EAER"}